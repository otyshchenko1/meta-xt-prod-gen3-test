Prerequisites:
==============
0. Ubuntu 16.04 should be used as host OS for build.
1. Install tools: apt-get install gawk wget diffstat texinfo chrpath socat libsdl1.2-dev \
                    python-crypto repo checkpolicy python-git \
                    python-ctypeslib bzr pigz m4 lftp openjdk-8-jdk git-core \
                    gnupg flex bison gperf build-essential zip curl zlib1g-dev \
                    gcc-multilib g++-multilib libc6-dev-i386 lib32ncurses5-dev \
                    x11proto-core-dev libx11-dev lib32z-dev ccache libgl1-mesa-dev \
                    libxml2-utils xsltproc unzip python-clang-5.0 -y
2. Download and install Google repo: https://source.android.com/setup/build/downloading#installing-repo
3. Checked with Python v 2.7.12, but other should also work

About:
======
Gen3-test product is based on Renesas BSP and Xen hypervisor. It contains a set of features required to have
both Display and GPU support in several domains at the same time (device passthrough, PVDRM, VGPU, etc).

There are three domains which are running on top of Xen:
1. Generic machine independent control domain named "Domain-0". This initramfs based domain is responsible
for managing VMs only (create/destroy/reboot guest domains). There is no HW assigned to this domain.
2. Machine dependent driver domain named "DomD". Almost all HW are assigned to this domain.
As this domain is not 1:1 mapped, Xen controls IPMMU to do a proper address translations (IPA to PA) for DMA masters.
It also contains different para-virtualized (PV) backends running inside it in order to provide guest domains
(without HW assigned) with different services such as Audio, Display, Net, Block, etc.
3. Machine dependent simple guest domain named "DomU". It has different PV frontends running and
doesn't have any HW assigned except GPU. The latter is shared between "DomD" and "DomU" in current setup.

It is worth to mention that IPMMU for GPU is enabled in case of H3 ES3.0 and M3N only. For other supported SoCs the PVRKM
performs IPA to PA translations using a hypercall to hypervisor.

Build:
======
Our build system uses set of additional meta layers and tools.
1. Please, clone the following build scripts, master branch:

git clone https://github.com/xen-troops/build-scripts.git
cd build-scripts

2. In the build-scripts directory you will find a sample configuration
file xt-build-server.cfg:

cp xt-build-server.cfg xt-gen3-test.cfg

3. Edit it to fit your environment.

Please, change the variables under [path] section:
 - workspace_base_dir: change it to point to the place where the build will happen
 - workspace_storage_base_dir: change it to where downloads and other files will be put

For example,

workspace_base_dir = /home/workspace_base
workspace_storage_base_dir = /home/workspace_storage_base

3.1 The XT_RCAR_EVAPROPRIETARY_DIR variable under [local_conf] section depends on whether prebuilt EVA proprietary "graphics" packages are going to be used.

If you are going to use prebuilt EVA proprietary "graphics" packages, please change XT_RCAR_EVAPROPRIETARY_DIR variable
to point to the place where the prebuilt packages will be copied in step #4.

If you are going to build Graphics DDK from sources (without prebuilt EVA proprietary "graphics" packages), please remove that variable.
In that case step #4 can be omitted.

3.2 The XT_RCAR_PROPRIETARY_MULTIMEDIA_DIR variable under [local_conf] section depends on whether the multimedia is going to be used (in DomD).

If you are going to use multimedia you will need the proprietary "multimedia" packages in the first place,
please change XT_RCAR_PROPRIETARY_MULTIMEDIA_DIR variable to point to the place where the corresponding packages will be copied in step #5.

If you are not going to use multimedia, please remove that variable. In that case step #5 can be omitted.

4. Download and copy EVA proprietary "graphics" packages to your local filesystem at the directory pointed by XT_RCAR_EVAPROPRIETARY_DIR variable
(only if prebuilt packages are used):

For example,

 - rcar-proprietary-graphic-salvator-x-h3-xt-domd.tar.gz
 - rcar-proprietary-graphic-salvator-x-h3-xt-domu.tar.gz

Due to the fact that the SoC is not actually changed for Salvator-XS and H3ULCB/M3ULCB boards,
you could reuse already provided binaries by making symlinks to corresponding archives.

For example (Salvator-XS case),

ln -s rcar-proprietary-graphic-salvator-x-h3-xt-domd.tar.gz rcar-proprietary-graphic-salvator-xs-h3-xt-domd.tar.gz
ln -s rcar-proprietary-graphic-salvator-x-h3-xt-domu.tar.gz rcar-proprietary-graphic-salvator-xs-h3-xt-domu.tar.gz

For example (H3ULCB case),

ln -s rcar-proprietary-graphic-salvator-x-h3-xt-domd.tar.gz rcar-proprietary-graphic-h3ulcb-xt-domd.tar.gz
ln -s rcar-proprietary-graphic-salvator-x-h3-xt-domu.tar.gz rcar-proprietary-graphic-h3ulcb-xt-domu.tar.gz

For example (M3ULCB case),

ln -s rcar-proprietary-graphic-salvator-x-m3-xt-domd.tar.gz rcar-proprietary-graphic-m3ulcb-xt-domd.tar.gz
ln -s rcar-proprietary-graphic-salvator-x-m3-xt-domu.tar.gz rcar-proprietary-graphic-m3ulcb-xt-domu.tar.gz

5. Only for the multimedia usage.
Follow the procedure described in "Preliminary steps #1" from https://elinux.org/R-Car/Boards/Yocto-Gen3
to download Multimedia and Graphics library and related Linux drivers. These software packages
should be stored at the directory pointed by XT_RCAR_PROPRIETARY_MULTIMEDIA_DIR variable.

Please note, although only "multimedia" packages will be used here, there is no need
to re-pack package archives in order to remove "graphics" packages, unneeded packages
will be just skipped.

6. Run the build script:

python ./build_prod.py --build-type dailybuild --machine MACHINE_NAME --product PRODUCT_NAME --branch RELEASE_NAME --with-local-conf --config xt-gen3-test.cfg --with-do-build

Where the PRODUCT_NAME depends on whether prebuilt EVA proprietary "graphics" packages are used or not:
- gen3-test (to use prebuilt EVA proprietary "graphics" packages)
- gen3-test-src (to build Graphics DDK from sources)

Where the RELEASE_NAME name is the name of the release to be built.
This is done in order to track product releases easily and have a possibility to build any release just by pointing a proper release name.
Please note, if "branch" parameter is not set then the current product's snapshot will be built.

Hereafter the supported MACHINE_NAMEs are:
- salvator-x-h3  (Salvator-X board with H3 ES2.0 SoC installed)
- salvator-x-h3-4x2g (Salvator-X board with H3 ES3.0 SoC installed)
- salvator-x-m3  (Salvator-X board with M3 SoC installed)
- salvator-xs-h3  (Salvator-XS board with H3 ES2.0 SoC installed)
- salvator-xs-h3-2x2g (Salvator-XS board with H3 ES3.0 SoC installed)
- salvator-xs-h3-4x2g (Salvator-XS board with H3 ES3.0 SoC installed)
- salvator-xs-m3n (Salvator-XS board with M3N SoC installed)
- h3ulcb (H3ULCB board with H3 ES2.0 SoC installed)
- m3ulcb (M3ULCB board with M3 SoC installed)

7. You are done. The artifacts of the build are located at workspace_base directory:
workspace_base
├── build
│   ├── conf
│   │
│   └── tmp
│       ├── log
│       │   ├── cooker
│       │   │   └── MACHINE_NAME
│       │   │
│       │   ├── dom0-image-thin-initramfs
│       │   │   └── cooker
│       │   │       └── generic-armv8-xt
│       │   │
│       │   ├── domd-image-weston
│       │   │   └── cooker
│       │   │       └── MACHINE_NAME-xt
│       │   │
│       │   ├── domu-image-weston
│       │       └── cooker
│       │           └── MACHINE_NAME-xt
│       │
│       ├── deploy
│       │   ├── dom0-image-thin-initramfs
│       │   │   └── images
│       │   │       └── generic-armv8-xt
│       │   │
│       │   ├── domd-image-weston
│       │   │   └── images
│       │   │       └── MACHINE_NAME-xt
│       │   │
│       │   ├── domu-image-weston
│       │   │   └── images
│       │   │       └── MACHINE_NAME-xt
│       │   │
│       │   └── mk_sdcard_image.sh
│       │
│       └── work
│           └── x86_64-xt-linux
│               ├── dom0-image-thin-initramfs
│               │   └── 1.0-r0
│               │       └── repo
│               │           ├── build
│               │           ├── meta-linaro
│               │           ├── meta-openembedded
│               │           ├── meta-xt-images-generic-armv8
│               │           ├── meta-virtualization
│               │           ├── meta-xt-images-extra
│               │           ├── meta-xt-prod-extra
│               │           ├── meta-xt-images-domx
│               │           ├── poky
│               │
│               ├── domd-image-weston
│               │   └── 1.0-r0
│               │       └── repo
│               │           ├── build
│               │           ├── meta-clang
│               │           ├── meta-linaro
│               │           ├── meta-openembedded
│               │           ├── meta-renesas
│               │           ├── meta-selinux
│               │           ├── meta-virtualization
│               │           ├── meta-xt-images-domx
│               │           ├── meta-xt-images-extra
│               │           ├── meta-xt-images-rcar-gen3
│               │           ├── meta-xt-images-vgpu
│               │           ├── meta-xt-prod-extra
│               │           ├── meta-xt-prod-vgpu
│               │           ├── poky
│               │           ├── proprietary
│               │
│               ├── domu-image-weston
│               │   └── 1.0-r0
│               │       └── repo
│               │           ├── build
│               │           ├── meta-clang
│               │           ├── meta-linaro
│               │           ├── meta-openembedded
│               │           ├── meta-renesas
│               │           ├── meta-selinux
│               │           ├── meta-virtualization
│               │           ├── meta-xt-images-domx
│               │           ├── meta-xt-images-extra
│               │           ├── meta-xt-images-rcar-gen3
│               │           ├── meta-xt-images-vgpu
│               │           ├── meta-xt-prod-extra
│               │           ├── meta-xt-prod-vgpu
│               │           ├── poky
│               │           ├── proprietary
│               │
│               ├── xt-image
│
├── meta-xt-images
├── meta-xt-prod-gen3-test
├── xt-distro

Images are located at:
- Domain-0:
workspace_base/build/tmp/deploy/dom0-image-thin-initramfs/images/generic-armv8-xt
Here we get a part of boot images:
  - uInitramfs - thin-initramfs for Domain-0
  - Image - Kernel image for Domain-0
- DomD:
workspace_base/build/tmp/deploy/domd-image-weston/images/MACHINE-NAME-xt
Here we get a part of boot images, all bootloader images and rootfs image for DomD:
  - xen-uImage - Xen main image
  - xenpolicy - special image for Xen usage
  - dom0.dtb - device-tree image for Domain-0
  - bootloader images in both binary and srec formats.
  - core-image-weston-MACHINE_NAME-xt.tar.bz2 - rootfs image for DomD
- DomU:
workspace_base/build/tmp/deploy/domu-image-weston/images/MACHINE-NAME-xt
Here we get a rootfs image for DomU:
  - core-image-weston-MACHINE_NAME-xt.tar.bz2 - rootfs image for DomU

Build logs are located at:
- Domain-0:
workspace_base/build/tmp/log/dom0-image-thin-initramfs/cooker/generic-armv8-xt
- DomD:
workspace_base/build/tmp/log/domd-image-weston/cooker/MACHINE-NAME-xt
- DomU:
workspace_base/build/tmp/log/domu-image-weston/cooker/MACHINE-NAME-xt

8. If one wants to build any domain images manually, at the time of development
for instance, it is possible by going into desired directory and using poky to build:

- For building Domain-0:
cd workspace_base/build/tmp/work/x86_64-xt-linux/dom0-image-thin-initramfs/1.0-r0/repo/
- For building DomD:
cd workspace_base/build/tmp/work/x86_64-xt-linux/domd-image-weston/1.0-r0/repo/
- For building DomU:
cd workspace_base/build/tmp/work/x86_64-xt-linux/domu-image-weston/1.0-r0/repo/

source poky/oe-init-build-env

- For building Domain-0:
bitbake core-image-thin-initramfs

- For building DomD or DomU:
bitbake core-image-weston

Usage:
======
It is possible to run system either using TFTP boot with NFS root or keeping
all images on a storage device such as eMMC or SD card.

Different helpers scripts and docs are located at:
workspace_base/meta-xt-prod-gen3-test/doc/

Let's consider available boot options in details.

1. Using a storage device.
In order to boot system using a storage device, required storage device should be prepared
and flashed beforehand. The mk_sdcard_image.sh script is intended to help with that:

sudo ./mk_sdcard_image.sh -p /IMAGE_FOLDER -d /IMAGE_FILE -c gen3

Where, IMAGE_FOLDER is a path to a folder where artifacts live (in the context of this document
it is a "deploy" directory) and IMAGE_FILE is an output image file or physical device how
it is appears in the filesystem (/dev/sdx). As far as script intended to support different products,
we need to specify '-c gen3' for this product.

1.1 In case of SDx card booting we just have to insert SD card to a Host machine and run a script,
the latter will do all required actions automatically. All what we need to care about is to write
proper environment variables from U-Boot command line (boot_dev/bootcmd) according to the chosen SDx.
See workspace_base/meta-xt-prod-gen3-test/doc/u-boot-env-salvator-x.txt for details.

1.2 In case of eMMC booting, we have to have an access to it in order to flash images.
It is going to be not quite easy as for removable SD card, but the one of the possible ways is
to prepare the image blob using the same script, copy resulting blob to NFS root directory,
set system to boot via NFS, go to a DomD on target (where eMMC device is available)
and using "dd" command just copy blob to eMMC.

For example,

prepare an image blob:
sudo ./mk_sdcard_image.sh -p /IMAGE_FOLDER -d /home/emmc.img -c gen3

and then run on target:
dd if=/home/emmc.img of=/dev/mmcblk0

After getting eMMC flashed we have to choose it to be an boot device in a similar way as it is done
for SD card.
See u-boot-env.txt for details.

2. Using TFTP boot with NFS root.
In case of TFTP booting we have to copy the following boot images into target-accessible TFTP boot
directory and extract guest domain rootfs images for being an NFS root directories for guest domains.
See https://github.com/xen-troops/manifests/wiki on how to setup TFTP, NFS, etc.

For example,

copy boot images to TFTP boot directory:
sudo mkdir /srv
cd workspace_base/build/tmp/deploy/dom0-image-thin-initramfs/images/generic-armv8-xt/
sudo cp uInitramfs /srv/
sudo cp Image /srv/
cd workspace_base/build/tmp/deploy/domd-image-weston/images/MACHINE_NAME-xt/
sudo cp dom0.dtb /srv/
sudo cp xenpolicy /srv/
sudo cp xen-uImage /srv/

extract DomD rootfs images:
sudo mkdir /srv/domd
cd workspace_base/build/tmp/deploy/domd-image-weston/images/MACHINE_NAME-xt/
sudo tar -xf core-image-weston-MACHINE_NAME-xt.tar.bz2 -C /srv/domd/

extract DomU rootfs images:
sudo mkdir /srv/domu
cd workspace_base/build/tmp/deploy/domu-image-weston/images/MACHINE_NAME-xt/
sudo tar -xf core-image-weston-MACHINE_NAME-xt.tar.bz2 -C /srv/domu/

It worth mentioning that some changes to domain config files are necessary to switch between NFS
and any of storage devices.

There are two options for doing that. Either by modifying source files followed by rebuilding
the whole Domain-0 or by modifying domain config files right in a built uInitramfs image which
implies unpacking an image before and packing it back after (an "uirfs.sh" script which
we will consider down the document is intended to help with that).

In order to modify sources go to the files location in inner yocto:
cd workspace_base/build/tmp/work/x86_64-xt-linux/dom0-image-thin-initramfs/1.0-r0/repo/meta-xt-prod-extra/recipes-extended/guest-addons/files

- Edit domd-MACHINE_NAME.cfg to uncomment "extra" option which corresponds to NFS.
- Edit domu-MACHINE_NAME.cfg to uncomment "extra" option which corresponds to NFS and comment "disk" option.

and then rebuild Domain-0 manually:
cd workspace_base/build/tmp/work/x86_64-xt-linux/dom0-image-thin-initramfs/1.0-r0/repo/
source poky/oe-init-build-env
bitbake core-image-thin-initramfs

So, as you can see, varying U-Boot's "boot_dev" and "bootcmd" environment variables
and domain config's "extra" and "disk" options it is possible to choose  different boot device
for each system component. For example, boot system using TFTP and then use SD card for guest domains.

Additional script available in the product.
1. uirfs.sh.
This script is intended to pack/unpack uInitramfs for Domain-0. It might be helpful since uInitramfs
contains a lot of things which may changed during testing. The "xt" directory shipes all guest domain
configs, device-tree and Kernel images, etc.

For example,

unpack uInitramfs:
cd /srv
sudo mkdir initramfs
sudo ./uirfs.sh unpack uInitramfs initramfs

Modify it's components if needed.
For example, domain config files located at:
/srv/initramfs/xt/dom.cfg/

pack it back:
sudo ./uirfs.sh pack uInitramfs initramfs
